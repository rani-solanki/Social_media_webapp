{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { DELETE_POST, GET_POSTS, POST_ERROR, UPDATE_LIKES } from './types'; // Get posts\n\nexport const getPosts = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/posts');\n    dispatch({\n      type: GET_POSTS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Add like \n\nexport const addLike = id => async dispatch => {\n  try {\n    const res = await axios.put(`/api/posts/like/${id}`);\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: {\n        id,\n        likes: res.data\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Remove like \n\nexport const removeLike = id => async dispatch => {\n  try {\n    const res = await axios.put(`/api/posts/lunike/${id}`);\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: {\n        id,\n        likes: res.data\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Delete Post\n\nexport const deletePost = id => async dispatch => {\n  try {\n    const res = await axios.delete(`/api/posts/${id}`);\n    dispatch({\n      type: DELETE_POST,\n      payload: id\n    });\n    dispatch(setAlert('Post Removed', 'success'));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/home/kartik/Desktop/FSD-HV-ACADEMY/social-media-app/my-app/src/actions/post.js"],"names":["axios","setAlert","DELETE_POST","GET_POSTS","POST_ERROR","UPDATE_LIKES","getPosts","dispatch","res","get","type","payload","data","err","msg","response","statusText","status","addLike","id","put","likes","removeLike","deletePost","delete"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport {setAlert} from './alert';\nimport {\n    DELETE_POST,\n    GET_POSTS,\n    POST_ERROR,\n    UPDATE_LIKES\n} from './types';\n\n// Get posts\n\nexport const getPosts =() => async dispatch => {\n    try {\n        const res = await axios.get('/api/posts');\n\n        dispatch({\n            type:GET_POSTS,\n            payload : res.data\n        })\n    } catch (err) {\n        dispatch({\n            type : POST_ERROR,\n            payload :{msg:err.response.statusText, status : err.response.status}\n        })\n    }\n}\n\n// Add like \n\nexport const addLike = id => async dispatch => {\n    try {\n        const res = await axios.put(`/api/posts/like/${id}`);\n\n        dispatch({\n            type:UPDATE_LIKES,\n            payload : {id, likes: res.data}\n        })\n    } catch (err) {\n        dispatch({\n            type : POST_ERROR,\n            payload :{msg:err.response.statusText, status : err.response.status}\n        })\n    }\n}\n\n// Remove like \n\nexport const removeLike = id => async dispatch => {\n    try {\n        const res = await axios.put(`/api/posts/lunike/${id}`);\n\n        dispatch({\n            type:UPDATE_LIKES,\n            payload : {id, likes: res.data}\n        })\n    } catch (err) {\n        dispatch({\n            type : POST_ERROR,\n            payload :{msg:err.response.statusText, status : err.response.status}\n        })\n    }\n}\n// Delete Post\n\nexport const deletePost = id => async dispatch => {\n    try {\n        const res = await axios.delete(`/api/posts/${id}`);\n\n        dispatch({\n            type:DELETE_POST,\n            payload : id\n        })\n\n        dispatch(setAlert('Post Removed','success'))\n    } catch (err) {\n        dispatch({\n            type : POST_ERROR,\n            payload :{msg:err.response.statusText, status : err.response.status}\n        })\n    }\n}"]},"metadata":{},"sourceType":"module"}