{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { REGISTER_FAIL, REGISTER_SUCCESS, USER_LOADED, AUTH_ERROR, LOGIN_FAIL, LOGIN_SUCCESS, LOGOUT, CLEAR_PROFILE } from \"./types\";\nimport setAuthToken from '../utils/setAuthToken'; //load user\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/api/auth');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; //Register User\n\nexport const register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('api/user', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; //Login User\n\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('api/auth', body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n}; //Logout / Clear user profile\n\nexport const logout = () => dispatch => {\n  dispatch({\n    type: CLEAR_PROFILE\n  });\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["/home/rani/Documents/Social media/client/src/actions/auth.js"],"names":["axios","setAlert","REGISTER_FAIL","REGISTER_SUCCESS","USER_LOADED","AUTH_ERROR","LOGIN_FAIL","LOGIN_SUCCESS","LOGOUT","CLEAR_PROFILE","setAuthToken","loadUser","dispatch","localStorage","token","res","get","type","payload","data","err","register","name","email","password","config","headers","body","JSON","stringify","post","errors","response","forEach","error","msg","login","logout"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport {setAlert} from './alert';\nimport {\n    REGISTER_FAIL,\n    REGISTER_SUCCESS,\n    USER_LOADED,\n    AUTH_ERROR,\n    LOGIN_FAIL,\n    LOGIN_SUCCESS,\n    LOGOUT,\n    CLEAR_PROFILE\n} from \"./types\";\nimport setAuthToken from '../utils/setAuthToken';\n\n\n//load user\n\nexport const loadUser = () => async dispatch => {\n    if(localStorage.token){\n        setAuthToken(localStorage.token);\n    }\n\n    try {\n        const res = await axios.get('/api/auth');\n\n        dispatch({\n            type:   USER_LOADED,\n            payload: res.data\n        });\n    } catch (err) {\n        dispatch({\n            type:AUTH_ERROR\n        });\n    }\n};  \n\n//Register User\n\nexport const register =({name , email, password}) => async dispatch => {\n    const config ={\n        headers :{\n            'Content-Type':'application/json'\n        }\n    }\n\n    const body = JSON.stringify({ name, email, password });\n    try {\n        const res = await axios.post('api/user',body,config);\n        \n        dispatch({\n            type:REGISTER_SUCCESS,\n            payload : res.data\n        });\n\n        dispatch(loadUser());\n    } catch (err) {\n        const errors = err.response.data.errors; \n\n        if (errors){\n            errors.forEach(error => dispatch(setAlert(error.msg,'danger'))     \n            );\n        }\n\n        dispatch({\n            type:REGISTER_FAIL \n        })\n    }\n}\n\n//Login User\nexport const login =(email, password) => async dispatch => {\n    const config ={\n        headers :{\n            'Content-Type':'application/json'\n        }\n    }\n    \n    const body = JSON.stringify({ email, password});\n    try {\n        const res = await axios.post('api/auth',body,config);\n        dispatch({\n            type:LOGIN_SUCCESS,\n            payload : res.data\n        });\n\n        dispatch(loadUser());\n    } catch (err) {\n        const errors = err.response.data.errors; \n\n        if (errors){\n            errors.forEach(error => dispatch(setAlert(error.msg,'danger'))     \n            );\n        }\n\n        dispatch({\n            type:LOGIN_FAIL \n        })\n    }\n};\n\n//Logout / Clear user profile\n\nexport const logout = () => dispatch =>{\n    dispatch({type:CLEAR_PROFILE});\n    dispatch({type:LOGOUT});\n\n\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}